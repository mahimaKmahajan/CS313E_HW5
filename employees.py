"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Mahima Mahajan and Maha Sivasubramanian, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: mkm4582
UT EID 2: ms94594   
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.__relationships = {}
        self.__savings = savings
        self._is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        self.salary = salary

    @property
    def name(self):
        """
        Returns the name of the employee.
        """
        return self.__name

    @property
    def manager(self):
        """
        Returns the manager of the employee.
        """
        return self.__manager

    @property
    def performance(self):
        """
        Returns the performance percentage of the employee.
        """
        return self.__performance

    @property
    def happiness(self):
        """
        Returns the happiness percentage of the employee.
        """
        return self.__happiness

    @property
    def salary(self):
        """
        Returns the salary of the employee.
        """
        return self.__salary

    @property
    def relationships(self):
        """
        Returns the relationships of the employee.
        """
        return self.__relationships

    @property
    def is_employed(self):
        """
        Returns whether the employee is employed or not.
        """
        return self._is_employed

    @property
    def savings(self):
        """
        Returns the savings of the employee.
        """
        return self.__savings

    @performance.setter
    def performance(self, value):
        self.__performance = max(PERCENTAGE_MIN, min(PERCENTAGE_MAX, value))

    @happiness.setter
    def happiness(self, value):
        self.__happiness = max(PERCENTAGE_MIN, min(PERCENTAGE_MAX, value))

    @salary.setter
    def salary(self, value):
        if value < 0:
            raise ValueError(SALARY_ERROR_MESSAGE)
        self.__salary = value

    @savings.setter
    def savings(self, value):
        self.__savings = value

    @relationships.setter
    def relationships(self, value):
        self.__relationships = value

    @is_employed.setter
    def is_employed(self, value):
        self._is_employed = value

    @abstractmethod
    def work(self):
        """
        Abstract method representing the work of the employee.
        """

    def interact(self, other):
        """
        Interactaction with another employee.
        """
        self.relationships[other.name] = self.relationships.get(other.name, 0)
        if self.relationships[other.name] > RELATIONSHIP_THRESHOLD:
            self.happiness += 1
        elif self.happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[other.name] += 1
        else:
            self.relationships[other.name] -= 1
            self.happiness -= 1

    def daily_expense(self):
        """
        Daily expense of the employee.
        """
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE

    def __str__(self):
        return (
            f"{self.name}\n\tSalary: ${self.salary}\n\tSavings: ${self.savings}\n\t"
            f"Happiness: {self.happiness}%\n\tPerformance: {self.performance}%"
        )

class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """
    # how do i set the self.relationships and have them all decrease?
    def work(self):
        #self.performance = INITIAL_PERFORMANCE - random.randint(-5,6)
        val_perf = random.randint(-5,6)
        #new_perf = INITIAL_PERFORMANCE + val_perf
        self.performance = self.performance + val_perf
        if val_perf <= 0:
            self.happiness -= 1
            #self.relationships[self] -= 1
            for name in self.relationships:
                self.relationships[name] -= 1
        else:
            self.happiness += 1

class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    def work(self):
        val_perf = random.randint(-15,15)
        self.performance += val_perf
        if val_perf <= 0:
            self.happiness -= 2
        else:
            self.happiness += 1

    def interact(self, other):
        super().interact(other)
        if other == self.manager:
            if (
                other.happiness > HAPPINESS_THRESHOLD
                and self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD
                ):
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.salary = self.salary // 2
                self.happiness -= 5
            if self.salary <= 0:
                self._is_employed = False

class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
    def work(self):
        val_perf = random.randint(-10,10)
        self.performance += val_perf
        if val_perf <= 0:
            self.happiness -= 1
        else:
            self.happiness += 1

    def interact(self, other):
        super().interact(other)
        if other == self.manager:
            if (
                other.happiness > HAPPINESS_THRESHOLD
                and self.performance >= PERM_EMPLOYEE_PERFORMANCE_THRESHOLD
            ):
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.happiness -= 1
